#!/bin/bash

# Define and install dependencies with a equivs control file
#
# This helper can/should only be called once per app
#
# example : ynh_install_app_dependencies dep1 dep2 "dep3|dep4|dep5"
#
# usage: ynh_install_app_dependencies dep [dep [...]]
# | arg: dep - the package name to install in dependence. Writing "dep3|dep4|dep5" can be used to specify alternatives. For example : dep1 dep2 "dep3|dep4|dep5" will require to install dep1 and dep 2 and (dep3 or dep4 or dep5).
#
# Requires YunoHost version 2.6.4 or higher.
ynh_install_app_dependencies () {
    local dependencies=$@
    # Add a comma for each space between packages. But not add a comma if the space separate a version specification. (See  below)
    dependencies="$(echo "$dependencies" | sed 's/\([^\<=\>]\)\ \([^(]\)/\1, \2/g')"
    local dependencies=${dependencies//|/ | }
    local manifest_path="../manifest.json"
    if [ ! -e "$manifest_path" ]; then
        manifest_path="../settings/manifest.json"	# Into the restore script, the manifest is not at the same place
    fi

    local version=$(grep '\"version\": ' "$manifest_path" | cut --delimiter='"' --fields=4)	# Retrieve the version number in the manifest file.
    if [ ${#version} -eq 0 ]; then
        version="1.0"
    fi
    local dep_app=${app//_/-}	# Replace all '_' by '-'

    # Handle specific versions
    if [[ "$dependencies" =~ [\<=\>] ]]
    then
        # Replace version specifications by relationships syntax
        # https://www.debian.org/doc/debian-policy/ch-relationships.html
        # Sed clarification
        # [^(\<=\>] ignore if it begins by ( or < = >. To not apply twice.
        # [\<=\>] matches < = or >
        # \+ matches one or more occurence of the previous characters, for >= or >>.
        # [^,]\+ matches all characters except ','
        # Ex: 'package>=1.0' will be replaced by 'package (>= 1.0)'
        dependencies="$(echo "$dependencies" | sed 's/\([^(\<=\>]\)\([\<=\>]\+\)\([^,]\+\)/\1 (\2 \3)/g')"
    fi

    #
    # Epic ugly hack to fix the goddamn dependency nightmare of sury
    # Sponsored by the "Djeezusse Fokin Kraiste Why Do Adminsys Has To Be So Fucking Complicated I Should Go Grow Potatoes Instead Of This Shit" collective
    # https://github.com/YunoHost/issues/issues/1407
    # 
    # If we require to install php dependency
    if echo $dependencies | grep --quiet 'php'
    then
        # And we have packages from sury installed (7.0.33-10+weirdshiftafter instead of 7.0.33-0 on debian)
        if dpkg --list | grep "php7.0" | grep --quiet --invert-match "7.0.33-0+deb9"
        then
            # And sury ain't already installed
            if ! grep --line-number --recursive --quiet "sury" /etc/apt/sources.list*
            then
                # Re-add sury
                ynh_install_extra_repo --repo="https://packages.sury.org/php/ $(ynh_get_debian_release) main" --key="https://packages.sury.org/php/apt.gpg" --name=extra_php_version

                # Pin this sury repository to prevent sury of doing shit
                ynh_pin_repo --package="*" --pin="origin \"packages.sury.org\"" --priority=200 --name=extra_php_version
                ynh_pin_repo --package="php${YNH_DEFAULT_PHP_VERSION}*" --pin="origin \"packages.sury.org\"" --priority=600 --name=extra_php_version --append
            fi
        fi
    fi

    cat > /tmp/${dep_app}-ynh-deps.control << EOF	# Make a control file for equivs-build
Section: misc
Priority: optional
Package: ${dep_app}-ynh-deps
Version: ${version}
Depends: ${dependencies}
Architecture: all
Description: Fake package for ${app} (YunoHost app) dependencies
 This meta-package is only responsible of installing its dependencies.
EOF
    ynh_package_install_from_equivs /tmp/${dep_app}-ynh-deps.control \
        || ynh_die --message="Unable to install dependencies"	# Install the fake package and its dependencies
    rm /tmp/${dep_app}-ynh-deps.control
    ynh_app_setting_set --app=$app --key=apt_dependencies --value="$dependencies"
}

# Add dependencies to install with ynh_install_app_dependencies
#
# usage: ynh_add_app_dependencies --package=phpversion [--replace]
# | arg: -p, --package=     - Packages to add as dependencies for the app.
# | arg: -r, --replace      - Replace dependencies instead of adding to existing ones.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_add_app_dependencies () {
    # Declare an array to define the options of this helper.
    local legacy_args=pr
    local -A args_array=( [p]=package= [r]=replace)
    local package
    local replace
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    replace=${replace:-0}

    local current_dependencies=""
    if [ $replace -eq 0 ]
    then
        local dep_app=${app//_/-}	# Replace all '_' by '-'
        if ynh_package_is_installed --package="${dep_app}-ynh-deps"
        then
            current_dependencies="$(dpkg-query --show --showformat='${Depends}' ${dep_app}-ynh-deps) "
        fi

        current_dependencies=${current_dependencies// | /|}
    fi

    ynh_install_app_dependencies "${current_dependencies}${package}"
}

#=================================================

# Install packages from an extra repository properly.
#
# usage: ynh_install_extra_app_dependencies --repo="repo" --package="dep1 dep2" [--key=key_url] [--name=name]
# | arg: -r, --repo=    - Complete url of the extra repository.
# | arg: -p, --package= - The packages to install from this extra repository
# | arg: -k, --key=     - url to get the public key.
# | arg: -n, --name=    - Name for the files for this repo, $app as default value.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_install_extra_app_dependencies () {
    # Declare an array to define the options of this helper.
    local legacy_args=rpkn
    local -A args_array=( [r]=repo= [p]=package= [k]=key= [n]=name= )
    local repo
    local package
    local key
    local name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    name="${name:-$app}"
    key=${key:-}

    # Set a key only if asked
    if [ -n "$key" ]
    then
        key="--key=$key"
    fi
    # Add an extra repository for those packages
    ynh_install_extra_repo --repo="$repo" $key --priority=995 --name=$name

    # Install requested dependencies from this extra repository.
    ynh_add_app_dependencies --package="$package"

    # Remove this extra repository after packages are installed
    ynh_remove_extra_repo --name=$app
}

# Add an extra repository correctly, pin it and get the key.
#
# [internal]
#
# usage: ynh_install_extra_repo --repo="repo" [--key=key_url] [--priority=priority_value] [--name=name] [--append]
# | arg: -r, --repo=        - Complete url of the extra repository.
# | arg: -k, --key=         - url to get the public key.
# | arg: -p, --priority=    - Priority for the pin
# | arg: -n, --name=        - Name for the files for this repo, $app as default value.
# | arg: -a, --append       - Do not overwrite existing files.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_install_extra_repo () {
    # Declare an array to define the options of this helper.
    local legacy_args=rkpna
    local -A args_array=( [r]=repo= [k]=key= [p]=priority= [n]=name= [a]=append )
    local repo
    local key
    local priority
    local name
    local append
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    name="${name:-$app}"
    append=${append:-0}
    key=${key:-}
    priority=${priority:-}

    if [ $append -eq 1 ]
    then
        append="--append"
        wget_append="tee --append"
    else
        append=""
        wget_append="tee"
    fi

    # Split the repository into uri, suite and components.
    # Remove "deb " at the beginning of the repo.
    repo="${repo#deb }"

    # Get the uri
    local uri="$(echo "$repo" | awk '{ print $1 }')"

    # Get the suite
    local suite="$(echo "$repo" | awk '{ print $2 }')"

    # Get the components
    local component="${repo##$uri $suite }"

    # Add the repository into sources.list.d
    ynh_add_repo --uri="$uri" --suite="$suite" --component="$component" --name="$name" $append

    # Pin the new repo with the default priority, so it won't be used for upgrades.
    # Build $pin from the uri without http and any sub path
    local pin="${uri#*://}"
    pin="${pin%%/*}"
    # Set a priority only if asked
    if [ -n "$priority" ]
    then
        priority="--priority=$priority"
    fi
    ynh_pin_repo --package="*" --pin="origin \"$pin\"" $priority --name="$name" $append

    # Get the public key for the repo
    if [ -n "$key" ]
    then
        mkdir --parents "/etc/apt/trusted.gpg.d"
        # Timeout option is here to enforce the timeout on dns query and tcp connect (c.f. man wget)
        wget --timeout 900 --quiet "$key" --output-document=- | gpg --dearmor | $wget_append /etc/apt/trusted.gpg.d/$name.gpg > /dev/null
    fi

    # Update the list of package with the new repo
    ynh_package_update
}

# Remove an extra repository and the assiociated configuration.
#
# [internal]
#
# usage: ynh_remove_extra_repo [--name=name]
# | arg: -n, --name=    - Name for the files for this repo, $app as default value.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_remove_extra_repo () {
    # Declare an array to define the options of this helper.
    local legacy_args=n
    local -A args_array=( [n]=name= )
    local name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    name="${name:-$app}"

    ynh_secure_remove "/etc/apt/sources.list.d/$name.list"
    ynh_secure_remove "/etc/apt/preferences.d/$name"
    ynh_secure_remove "/etc/apt/trusted.gpg.d/$name.gpg"
    ynh_secure_remove "/etc/apt/trusted.gpg.d/$name.asc"

    # Update the list of package to exclude the old repo
    ynh_package_update
}

# Add a repository.
#
# [internal]
#
# usage: ynh_add_repo --uri=uri --suite=suite --component=component [--name=name] [--append]
# | arg: -u, --uri=         - Uri of the repository.
# | arg: -s, --suite=       - Suite of the repository.
# | arg: -c, --component=   - Component of the repository.
# | arg: -n, --name=        - Name for the files for this repo, $app as default value.
# | arg: -a, --append       - Do not overwrite existing files.
#
# Example for a repo like deb http://forge.yunohost.org/debian/ stretch stable
#                             uri                               suite   component
# ynh_add_repo --uri=http://forge.yunohost.org/debian/ --suite=stretch --component=stable
#
# Requires YunoHost version 3.8.1 or higher.
ynh_add_repo () {
    # Declare an array to define the options of this helper.
    local legacy_args=uscna
    local -A args_array=( [u]=uri= [s]=suite= [c]=component= [n]=name= [a]=append )
    local uri
    local suite
    local component
    local name
    local append
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    name="${name:-$app}"
    append=${append:-0}

    if [ $append -eq 1 ]
    then
        append="tee --append"
    else
        append="tee"
    fi

    mkdir --parents "/etc/apt/sources.list.d"
    # Add the new repo in sources.list.d
    echo "deb $uri $suite $component" \
        | $append "/etc/apt/sources.list.d/$name.list"
}

# Pin a repository.
#
# [internal]
#
# usage: ynh_pin_repo --package=packages --pin=pin_filter [--priority=priority_value] [--name=name] [--append]
# | arg: -p, --package=     - Packages concerned by the pin. Or all, *.
# | arg: -i, --pin=         - Filter for the pin.
# | arg: -p, --priority=    - Priority for the pin
# | arg: -n, --name=        - Name for the files for this repo, $app as default value.
# | arg: -a, --append       - Do not overwrite existing files.
#
# See https://manpages.debian.org/stretch/apt/apt_preferences.5.en.html#How_APT_Interprets_Priorities for information about pinning.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_pin_repo () {
    # Declare an array to define the options of this helper.
    local legacy_args=pirna
    local -A args_array=( [p]=package= [i]=pin= [r]=priority= [n]=name= [a]=append )
    local package
    local pin
    local priority
    local name
    local append
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    package="${package:-*}"
    priority=${priority:-50}
    name="${name:-$app}"
    append=${append:-0}

    if [ $append -eq 1 ]
    then
        append="tee --append"
    else
        append="tee"
    fi

    mkdir --parents "/etc/apt/preferences.d"
    echo "Package: $package
Pin: $pin
Pin-Priority: $priority
" \
    | $append "/etc/apt/preferences.d/$name"
}

